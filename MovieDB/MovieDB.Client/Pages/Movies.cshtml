@using MovieDB.Shared
@page "/movies"
@inject HttpClient Http

<h1>Movie DB</h1>


Movie List using Components and Server API
<div>
    <div class="row">
        <div class="col mt-3">
            <button class="btn btn-primary" onclick=@AddMovie>Add Movie</button>
        </div>
    </div>
    <div class="row">
        <MovieDisplay movies="@movies" OnEditEvent="@EditMovie" OnDeleteEvent="@(async (m) => await DeleteMovie(m))" />
        @if (ShowMovieForm)
        {
            <MovieAddedit movie="@movieForm" ShowMovieFormAlert="@ShowMovieFormAlert" IsNewMovie="@IsNewMovie" OnSaveEvent="@(async () => await SaveMovie())" OnCancelEvent="@HideMovieModal" />
        }
    </div>
</div>

@functions {

    List<Movie> movies = new List<Movie>();
    private bool ShowMovieForm { get; set; } = false;
    private bool IsNewMovie { get; set; } = false;
    private bool ShowMovieFormAlert { get; set; } = false;
    private Movie movieForm { get; set; } = new Movie();

    protected override async Task OnInitAsync()
    {
        movies = await Http.GetJsonAsync<List<Movie>>("/api/Movies");
    }
    protected async Task UpdateMovieAPI(Movie movie)
    {
        await Http.SendJsonAsync(HttpMethod.Put, "/api/Movies/" + movie.Id, movie);
    }
    protected async Task AddMovieAPI(Movie movie)
    {
        await Http.SendJsonAsync(HttpMethod.Post, "/api/Movies", movie);
    }
    protected async Task DeleteMovieAPI(Movie movie)
    {
        await Http.DeleteAsync("/api/Movies/" + movie.Id);
    }

    void AddMovie()
    {
        movieForm = new Movie();
        IsNewMovie = true;
        ShowMovieModal();
    }
    void EditMovie(Guid movieId)
    {
        var mymovie = movies.FirstOrDefault(x => x.Id == movieId);
        movieForm = new Movie { Id = mymovie.Id, Title = mymovie.Title, Year = mymovie.Year, Director = mymovie.Director, Description = mymovie.Description };
        IsNewMovie = false;
        ShowMovieModal();
        StateHasChanged();
    }
    async Task DeleteMovie(Movie movie)
    {
        movies.Remove(movie);
        await DeleteMovieAPI(movie);
    }

    async Task SaveMovie()
    {
        if (!ValidateMovie(movieForm))
        {
            ShowMovieFormAlert = true;
            StateHasChanged();
        }
        else
        {
            if (IsNewMovie)
            {
                movies.Add(movieForm);
                await AddMovieAPI(movieForm);
            }
            else
            {
                var movieIndex = movies.FindIndex(x => x.Id == movieForm.Id);
                movies.RemoveAt(movieIndex);
                movies.Insert(movieIndex, movieForm);
                await UpdateMovieAPI(movieForm);
            }
            HideMovieModal();
        }
    }
    bool ValidateMovie(Movie movie)
    {
        if (string.IsNullOrWhiteSpace(movie.Title))
            return false;
        if (string.IsNullOrWhiteSpace(movie.Description))
            return false;
        if (string.IsNullOrWhiteSpace(movie.Director))
            return false;
        if (movie.Year > 2020 || movie.Year < 1920)
            return false;
        return true;
    }

    void ShowMovieModal()
    {
        ShowMovieFormAlert = false;
        ShowMovieForm = true;

    }
    void HideMovieModal()
    {
        ShowMovieForm = false;
        StateHasChanged();
    }
}